var replacements = [
  {search: 'NanAsyncWorker', replace: 'Nan::AsyncWorker'},
  {search: 'NanAsyncQueueWorker', replace: 'Nan::AsyncQueueWorker'},
  {search: 'NanCallback', replace: 'Nan::Callback'},
  {search: 'NanSetInternalFieldPointer', replace: 'Nan::SetInternalFieldPointer'},
  {search: 'NanGetInternalFieldPointer', replace: 'Nan::GetInternalFieldPointer'},
  {search: 'NanNewBufferHandle\\(([^;]+);', replace: 'Nan::NewBuffer($1.ToLocalChecked();'},
  {search: '(NanNew(<(v8::)?String>)?\\(\"[^\"]*\"\\))', replace: '$1.ToLocalChecked()'},
  {search: 'NanNew', replace: 'Nan::New'},
  {search: 'NODE_SET_PROTOTYPE_METHOD', replace: 'Nan::SetPrototypeMethod'},
  {search: 'NODE_SET_METHOD', replace: 'Nan::SetMethod'},
  {search: '_NAN_METHOD_ARGS_TYPE', replace: 'Nan::NAN_METHOD_ARGS_TYPE'},
  {search: '(\\W)?args(\\W|\\.|\\[)', replace: '$1info$2'},
  {search: '(^|\\s)(v8::)?Persistent', replace: '$1Nan::Persistent'},
  {search: 'NanAssignPersistent(<\w+>)?\\(([^,]+),\\s*([^)]+)\\)', replace: '$2.Reset($3)'},
  {search: 'NanDisposePersistent\\(([^\\)]+)\\)', replace: '$1.Reset()'},
  {search: 'NanReturnValue', replace: 'info.GetReturnValue().Set'},
  {search: 'NanReturnNull\\(\\)', replace: 'info.GetReturnValue().Set(Nan::Null())'},
  {search: 'NanScope\\(\\)', replace: 'Nan::HandleScope\ scope'},
  {search: 'NanEscapableScope\\(\\)', replace: 'Nan::EscapableHandleScope scope'},
  {search: 'NanEscapeScope', replace: 'scope.Escape'},
  {search: 'NanReturnUndefined\\(\\);', replace: 'return;'},
  {search: 'NanUtf8String', replace: 'Nan::Utf8String'},
  {search: 'NanAsciiString', replace: 'Nan::Utf8String'},
  {search: 'NanObjectWrapHandle\\(([^\\)]+)\\)', replace: '$1->handle()'},
  {search: '(node::)?ObjectWrap', replace: 'Nan::ObjectWrap'},
  {search: 'NanMakeCallback', replace: 'Nan::MakeCallback'},
  {search: 'NanNull', replace: 'Nan::Null'},
  {search: 'NanUndefined', replace: 'Nan::Undefined'},
  {search: 'NanFalse', replace: 'Nan::False'},
  {search: 'NanTrue', replace: 'Nan::True'},
  {search: 'NanThrow(\w+)?Error', replace: 'Nan::Throw$1Error'},
  {search: 'NanThrowTypeError', replace: 'Nan::ThrowTypeError'},
  {search: 'NanError', replace: 'Nan::Error'},
  {search: 'NanGetCurrentContext', replace: 'Nan::GetCurrentContext'},
  {search: '([a-zA-Z0-9_]+)->SetAccessor\\(', replace: 'Nan::SetAccessor($1, '},
  {search: 'NanAdjustExternalMemory', replace: 'Nan::AdjustExternalMemory'},
  {search: 'NanSetTemplate', replace: 'Nan::SetTemplate'},
  {search: 'NanHasInstance\\(([^,]+),\\s*([^)]+)\\)', replace: 'Nan::New($1)->HasInstance($2)'}
]

module.exports = function () {
  return replacements
}
